name: CMake

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - develop
      - release

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  IMAGE_NAME: weyrick/ci-test
  BINARY: ci_test

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

    - name: Upload binary artifact
      uses: actions/upload-artifact@v2
      with:
        name: binary
        path: ${{github.workspace}}/build/${{env.BINARY}}

  package:
    needs: build
    runs-on: ubuntu-latest
    # if this is a push into one of our main branches (rather than just a pull request), we will also package
    if: github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake to generate VERSION
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Get branch name (merge)
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Debug branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: Get VERSION
        run: |
          echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV

      - name: Debug version
        run: echo ${{ env.VERSION }}

      - name: Generate ref tag (master)
        if: ${{ env.BRANCH_NAME == 'master' }}
        run: |
          echo "REF_TAG=latest" >> $GITHUB_ENV
          echo "PRERELEASE=false" >> $GITHUB_ENV
          echo "DRAFT=true" >> $GITHUB_ENV

      - name: Generate ref tag (develop)
        if: ${{ env.BRANCH_NAME == 'develop' }}
        run: |
          echo "REF_TAG=latest-develop" >> $GITHUB_ENV
          echo "PRERELEASE=true" >> $GITHUB_ENV
          echo "DRAFT=false" >> $GITHUB_ENV

      - name: Generate ref tag (release candidate)
        if: ${{ env.BRANCH_NAME == 'release' }}
        run: |
          echo "REF_TAG=latest-rc" >> $GITHUB_ENV
          echo "PRERELEASE=true" >> $GITHUB_ENV
          echo "DRAFT=false" >> $GITHUB_ENV

      - name: Manage Github ref tags
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          # note deleteRef can't start with refs/, but create createRef does.
          script: |
            try {
                await github.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: "tags/${{ env.REF_TAG }}",
                })
            } catch (e) {
              console.log("The tag doesn't exist yet: " + e)
            }
            await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.REF_TAG }}",
              sha: context.sha
            })

      - name: Debug ref tag
        run: echo ${{ env.REF_TAG }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build + push VERSION
        run: |
          docker build . --file docker/Dockerfile --tag ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Tag + push docker image with ref tag (cached build)
        run: |
          docker build . --file docker/Dockerfile --tag ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }}
          docker push ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }}

      - name: Download binary
        uses: actions/download-artifact@v2
        with:
          name: binary

      - name: Manage Github existing releases
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            try {
                console.log(await github.repos.listReleases({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                }))
            } catch (e) {
              console.log("The tag doesn't exist yet: " + e)
            }
            try {
                console.log(await github.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: "${{ env.REF_TAG }}"
                }))
            } catch (e) {
              console.log("The tag doesn't exist yet: " + e)
            }

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{env.BINARY}}
          name: ${{env.VERSION}}
          tag_name: ${{env.REF_TAG}}
          prerelease: ${{env.PRERELEASE}}
        #  draft: ${{env.DRAFT}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

